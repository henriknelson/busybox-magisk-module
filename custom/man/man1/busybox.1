.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 "2019-08-28" "version 1.31.0" "busybox"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common \s-1UNIX\s0 utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in \s-1GNU\s0 coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured \s-1GNU\s0 cousins; however, the
options that are included provide the expected functionality and behave very
much like their \s-1GNU\s0 counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete \s-1POSIX\s0 environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by \s-1CONFIG_PREFIX. CONFIG_PREFIX\s0 can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by \s-1CONFIG_PREFIX.\s0
.SH "USAGE"
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the \s-1CONFIG_FEATURE_VERBOSE_USAGE\s0 option has
been enabled, more detailed usage information will also be available.
.SH "COMMANDS"
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 10
\&        ar, arp, awk, base64, basename, bbconfig, bunzip2, bzip2, cal, cat,
\&        chattr, chgrp, chmod, chown, chpst, chrt, cksum, clear, cmp, comm,
\&        cp, cpio, crond, crontab, cut, date, dc, dd, diff, dirname,
\&        dos2unix, du, echo, egrep, env, envdir, expand, expr, false, find,
\&        fold, free, fsync, ftpd, ftpget, ftpput, fuser, getopt, grep,
\&        gunzip, gzip, hd, head, hexdump, hostname, httpd, i2ctransfer, id,
\&        ifconfig, inotifyd, install, iostat, ipcalc, kill, killall, less,
\&        linux32, linux64, ln, ls, lsattr, lsof, lsusb, lzma, makemime, man,
\&        md5sum, mkdir, mkfifo, mknod, mktemp, more, mpstat, mv, nc, netstat,
\&        nice, nmeter, nohup, nproc, nslookup, od, patch, pgrep, pidof,
\&        pipe_progress, pkill, pmap, popmaildir, printenv, printf, ps, pscan,
\&        pstree, pwd, pwdx, readlink, realpath, reformime, renice, reset,
\&        resize, rev, rm, rmdir, route, run\-parts, runsv, runsvdir, rx,
\&        script, scriptreplay, sed, sendmail, seq, setsid, setuidgid,
\&        sha1sum, sha256sum, sha3sum, sha512sum, shuf, sleep, smemcap,
\&        softlimit, sort, split, start\-stop\-daemon, strings, stty, sum, sv,
\&        svlogd, sync, sysctl, tac, tail, tar, tcpsvd, tee, telnet, telnetd,
\&        test, tftp, tftpd, time, timeout, touch, tr, traceroute, true, ts,
\&        tty, ttysize, udpsvd, uname, uncompress, unexpand, uniq, unix2dos,
\&        unlink, unlzma, unxz, unzip, uptime, usleep, uudecode, uuencode, vi,
\&        watch, wc, wget, which, whoami, whois, xargs, xz, yes
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP "\fBar\fR" 4
.IX Item "ar"
ar [\-o] [\-v] [\-p] [\-t] [\-x] \s-1ARCHIVE FILES\s0
.Sp
Extract or list \s-1FILES\s0 from an ar archive
.Sp
.Vb 5
\&        \-o      Preserve original dates
\&        \-p      Extract to stdout
\&        \-t      List
\&        \-x      Extract
\&        \-v      Verbose
.Ve
.IP "\fBarp\fR" 4
.IX Item "arp"
arp 
[\-vn]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-a [\s-1HOSTNAME\s0]
[\-v]		    [\-i \s-1IF\s0] \-d \s-1HOSTNAME\s0 [pub]
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-s \s-1HOSTNAME HWADDR\s0 [temp]
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-s \s-1HOSTNAME HWADDR\s0 [netmask \s-1MASK\s0] pub
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-Ds \s-1HOSTNAME IFACE\s0 [netmask \s-1MASK\s0] pub
.Sp
Manipulate \s-1ARP\s0 cache
.Sp
.Vb 9
\&        \-a              Display (all) hosts
\&        \-d              Delete ARP entry
\&        \-s              Set new entry
\&        \-v              Verbose
\&        \-n              Don\*(Aqt resolve names
\&        \-i IF           Network interface
\&        \-D              Read HWADDR from IFACE
\&        \-A,\-p AF        Protocol family
\&        \-H HWTYPE       Hardware address type
.Ve
.IP "\fBawk\fR" 4
.IX Item "awk"
awk [\s-1OPTIONS\s0] [\s-1AWK_PROGRAM\s0] [\s-1FILE\s0]...
.Sp
.Vb 4
\&        \-v VAR=VAL      Set variable
\&        \-F SEP          Use SEP as field separator
\&        \-f FILE         Read program from FILE
\&        \-e AWK_PROGRAM
.Ve
.IP "\fBbase64\fR" 4
.IX Item "base64"
base64 [\-d] [\s-1FILE\s0]
.Sp
Base64 encode or decode \s-1FILE\s0 to standard output
	\-d	Decode data
.IP "\fBbasename\fR" 4
.IX Item "basename"
basename \s-1FILE\s0 [\s-1SUFFIX\s0]
.Sp
Strip directory path and .SUFFIX from \s-1FILE\s0
.IP "\fBbbconfig\fR" 4
.IX Item "bbconfig"
bbconfig
.Sp
Print the config file used by busybox build
.IP "\fBbunzip2\fR" 4
.IX Item "bunzip2"
bunzip2 [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 3
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
.Ve
.IP "\fBbzip2\fR" 4
.IX Item "bzip2"
bzip2 [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Compress FILEs (or stdin) with bzip2 algorithm
.Sp
.Vb 6
\&        \-1..9   Compression level
\&        \-d      Decompress
\&        \-t      Test file integrity
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
.Ve
.IP "\fBcal\fR" 4
.IX Item "cal"
cal [\-jy] [[\s-1MONTH\s0] \s-1YEAR\s0]
.Sp
Display a calendar
.Sp
.Vb 2
\&        \-j      Use julian dates
\&        \-y      Display the entire year
.Ve
.IP "\fBcat\fR" 4
.IX Item "cat"
cat [\-nbvteA] [\s-1FILE\s0]...
.Sp
Print FILEs to stdout
.Sp
.Vb 6
\&        \-n      Number output lines
\&        \-b      Number nonempty lines
\&        \-v      Show nonprinting characters as ^x or M\-x
\&        \-t      ...and tabs as ^I
\&        \-e      ...and end lines with $
\&        \-A      Same as \-vte
.Ve
.IP "\fBchattr\fR" 4
.IX Item "chattr"
chattr [\-R] [\-v \s-1VERSION\s0] [\-+=AacDdijsStTu] \s-1FILE...\s0
.Sp
Change ext2 file attributes
.Sp
.Vb 3
\&        \-R      Recurse
\&        \-v VER  Set version/generation number
\&Modifiers:
\&
\&        \-,+,=   Remove/add/set attributes
\&Attributes:
\&
\&        A       Don\*(Aqt track atime
\&        a       Append mode only
\&        c       Enable compress
\&        D       Write dir contents synchronously
\&        d       Don\*(Aqt backup with dump
\&        i       Cannot be modified (immutable)
\&        j       Write all data to journal first
\&        s       Zero disk storage when deleted
\&        S       Write synchronously
\&        t       Disable tail\-merging of partial blocks with other files
\&        u       Allow file to be undeleted
.Ve
.IP "\fBchgrp\fR" 4
.IX Item "chgrp"
chgrp [\-RhLHP]... \s-1GROUP FILE...\s0
.Sp
Change the group membership of each \s-1FILE\s0 to \s-1GROUP\s0
.Sp
.Vb 5
\&        \-R      Recurse
\&        \-h      Affect symlinks instead of symlink targets
\&        \-L      Traverse all symlinks to directories
\&        \-H      Traverse symlinks on command line only
\&        \-P      Don\*(Aqt traverse symlinks (default)
.Ve
.IP "\fBchmod\fR" 4
.IX Item "chmod"
chmod [\-R] MODE[,MODE]... \s-1FILE...\s0
.Sp
Each \s-1MODE\s0 is one or more of the letters ugoa, one of the
symbols +\-= and one or more of the letters rwxst
.Sp
.Vb 1
\&        \-R      Recurse
.Ve
.IP "\fBchown\fR" 4
.IX Item "chown"
chown [\-Rh]... USER[:[\s-1GRP\s0]] \s-1FILE...\s0
.Sp
Change the owner and/or group of each \s-1FILE\s0 to \s-1USER\s0 and/or \s-1GRP\s0
.Sp
.Vb 2
\&        \-R      Recurse
\&        \-h      Affect symlinks instead of symlink targets
.Ve
.IP "\fBchpst\fR" 4
.IX Item "chpst"
chpst [\-vP012] [\-u USER[:GRP]] [\-U USER[:GRP]] [\-e \s-1DIR\s0]
	[\-/ \s-1DIR\s0] [\-n \s-1NICE\s0] [\-m \s-1BYTES\s0] [\-d \s-1BYTES\s0] [\-o N]
	[\-p N] [\-f \s-1BYTES\s0] [\-c \s-1BYTES\s0] \s-1PROG ARGS\s0
.Sp
Change the process state, run \s-1PROG\s0
.Sp
.Vb 10
\&        \-u USER[:GRP]   Set uid and gid
\&        \-U USER[:GRP]   Set $UID and $GID in environment
\&        \-e DIR          Set environment variables as specified by files
\&                        in DIR: file=1st_line_of_file
\&        \-/ DIR          Chroot to DIR
\&        \-n NICE         Add NICE to nice value
\&        \-m BYTES        Same as \-d BYTES \-s BYTES \-l BYTES
\&        \-d BYTES        Limit data segment
\&        \-o N            Limit number of open files per process
\&        \-p N            Limit number of processes per uid
\&        \-f BYTES        Limit output file sizes
\&        \-c BYTES        Limit core file size
\&        \-v              Verbose
\&        \-P              Create new process group
\&        \-0              Close stdin
\&        \-1              Close stdout
\&        \-2              Close stderr
.Ve
.IP "\fBchrt\fR" 4
.IX Item "chrt"
chrt \-m | \-p [\s-1PRIO\s0] \s-1PID\s0 | [\-rfobi] \s-1PRIO PROG\s0 [\s-1ARGS\s0]
.Sp
Change scheduling priority and class for a process
.Sp
.Vb 7
\&        \-m      Show min/max priorities
\&        \-p      Operate on PID
\&        \-r      Set SCHED_RR class
\&        \-f      Set SCHED_FIFO class
\&        \-o      Set SCHED_OTHER class
\&        \-b      Set SCHED_BATCH class
\&        \-i      Set SCHED_IDLE class
.Ve
.IP "\fBcksum\fR" 4
.IX Item "cksum"
cksum \s-1FILE...\s0
.Sp
Calculate the \s-1CRC32\s0 checksums of FILEs
.IP "\fBclear\fR" 4
.IX Item "clear"
clear
.Sp
Clear screen
.IP "\fBcmp\fR" 4
.IX Item "cmp"
cmp [\-l] [\-s] \s-1FILE1\s0 [\s-1FILE2\s0]
.Sp
Compare \s-1FILE1\s0 with \s-1FILE2\s0 (or stdin)
.Sp
.Vb 3
\&        \-l      Write the byte numbers (decimal) and values (octal)
\&                for all differing bytes
\&        \-s      Quiet
.Ve
.IP "\fBcomm\fR" 4
.IX Item "comm"
comm [\-123] \s-1FILE1 FILE2\s0
.Sp
Compare \s-1FILE1\s0 with \s-1FILE2\s0
.Sp
.Vb 3
\&        \-1      Suppress lines unique to FILE1
\&        \-2      Suppress lines unique to FILE2
\&        \-3      Suppress lines common to both files
.Ve
.IP "\fBcp\fR" 4
.IX Item "cp"
cp [\s-1OPTIONS\s0] \s-1SOURCE... DEST\s0
.Sp
Copy \s-1SOURCE\s0(s) to \s-1DEST\s0
.Sp
.Vb 11
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Overwrite
\&        \-i      Prompt before overwrite
\&        \-l,\-s   Create (sym)links
\&        \-T      Treat DEST as a normal file
\&        \-u      Copy only newer files
.Ve
.IP "\fBcpio\fR" 4
.IX Item "cpio"
cpio [\-dmvu] [\-F \s-1FILE\s0] [\-R USER[:GRP]] [\-H newc] [\-tio] [\-p \s-1DIR\s0] [\s-1EXTR_FILE\s0]...
.Sp
Extract (\-i) or list (\-t) files from a cpio archive, or
take file list from stdin and create an archive (\-o) or copy files (\-p)
.Sp
Main operation mode:
.Sp
.Vb 5
\&        \-t      List
\&        \-i      Extract EXTR_FILEs (or all)
\&        \-o      Create (requires \-H newc)
\&        \-p DIR  Copy files to DIR
\&Options:
\&
\&        \-H newc Archive format
\&        \-d      Make leading directories
\&        \-m      Preserve mtime
\&        \-v      Verbose
\&        \-u      Overwrite
\&        \-F FILE Input (\-t,\-i,\-p) or output (\-o) file
\&        \-R USER[:GRP]   Set owner of created files
\&        \-L      Dereference symlinks
\&        \-0      Input is separated by NULs
.Ve
.IP "\fBcrond\fR" 4
.IX Item "crond"
crond \-fbS \-l N \-d N \-L \s-1LOGFILE\s0 \-c \s-1DIR\s0
.Sp
.Vb 7
\&        \-f      Foreground
\&        \-b      Background (default)
\&        \-S      Log to syslog (default)
\&        \-l N    Set log level. Most verbose 0, default 8
\&        \-d N    Set log level, log to stderr
\&        \-L FILE Log to FILE
\&        \-c DIR  Cron dir. Default:/system/var/spool/cron/crontabs
.Ve
.IP "\fBcrontab\fR" 4
.IX Item "crontab"
crontab [\-c \s-1DIR\s0] [\-u \s-1USER\s0] [\-ler]|[\s-1FILE\s0]
.Sp
.Vb 6
\&        \-c      Crontab directory
\&        \-u      User
\&        \-l      List crontab
\&        \-e      Edit crontab
\&        \-r      Delete crontab
\&        FILE    Replace crontab by FILE (\*(Aq\-\*(Aq: stdin)
.Ve
.IP "\fBcut\fR" 4
.IX Item "cut"
cut [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print selected fields from each input \s-1FILE\s0 to stdout
.Sp
.Vb 6
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d CHAR Use CHAR instead of tab as the field delimiter
\&        \-s      Output only the lines containing delimiter
\&        \-f N    Print only these fields
\&        \-n      Ignored
.Ve
.IP "\fBdate\fR" 4
.IX Item "date"
date [\s-1OPTIONS\s0] [+FMT] [\s-1TIME\s0]
.Sp
Display time (using +FMT), or set time
.Sp
.Vb 10
\&        [\-s,\-\-set] TIME Set time to TIME
\&        \-u,\-\-utc        Work in UTC (don\*(Aqt convert to local time)
\&        \-R,\-\-rfc\-2822   Output RFC\-2822 compliant date string
\&        \-I[SPEC]        Output ISO\-8601 compliant date string
\&                        SPEC=\*(Aqdate\*(Aq (default) for date only,
\&                        \*(Aqhours\*(Aq, \*(Aqminutes\*(Aq, or \*(Aqseconds\*(Aq for date and
\&                        time to the indicated precision
\&        \-r,\-\-reference FILE     Display last modification time of FILE
\&        \-d,\-\-date TIME  Display TIME, not \*(Aqnow\*(Aq
\&        \-D FMT          Use FMT (strptime format) for \-d TIME conversion
.Ve
.Sp
Recognized \s-1TIME\s0 formats:
.Sp
.Vb 5
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD\-hh:mm[:ss]
\&        YYYY\-MM\-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
\&        \*(Aqdate TIME\*(Aq form accepts MMDDhhmm[[YY]YY][.ss] instead
.Ve
.IP "\fBdc\fR" 4
.IX Item "dc"
dc [\-x] [\-eSCRIPT]... [\-fFILE]... [\s-1FILE\s0]...
.Sp
Tiny \s-1RPN\s0 calculator. Operations:
+, \-, *, /, %, ~, ^, |,
p \- print top of the stack without popping
f \- print entire stack
k \- pop the value and set the precision
i \- pop the value and set input radix
o \- pop the value and set output radix
Examples: dc \-e'2 2 + p' \-> 4, dc \-e'8 8 * 2 2 + / p' \-> 16
.IP "\fBdd\fR" 4
.IX Item "dd"
dd [if=FILE] [of=FILE] [ibs=N obs=N/bs=N] [count=N] [skip=N] [seek=N]
	[conv=notrunc|noerror|sync|fsync]
	[iflag=skip_bytes|fullblock] [oflag=seek_bytes|append]
.Sp
Copy a file with converting and formatting
.Sp
.Vb 10
\&        if=FILE         Read from FILE instead of stdin
\&        of=FILE         Write to FILE instead of stdout
\&        bs=N            Read and write N bytes at a time
\&        ibs=N           Read N bytes at a time
\&        obs=N           Write N bytes at a time
\&        count=N         Copy only N input blocks
\&        skip=N          Skip N input blocks
\&        seek=N          Skip N output blocks
\&        conv=notrunc    Don\*(Aqt truncate output file
\&        conv=noerror    Continue after read errors
\&        conv=sync       Pad blocks with zeros
\&        conv=fsync      Physically write data out before finishing
\&        conv=swab       Swap every pair of bytes
\&        iflag=skip_bytes        skip=N is in bytes
\&        iflag=fullblock Read full blocks
\&        oflag=seek_bytes        seek=N is in bytes
\&        oflag=append    Open output file in append mode
\&        status=noxfer   Suppress rate output
\&        status=none     Suppress all output
.Ve
.Sp
N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), \s-1MB, M, GB, G\s0
.IP "\fBdiff\fR" 4
.IX Item "diff"
diff [\-abBdiNqrTstw] [\-L \s-1LABEL\s0] [\-S \s-1FILE\s0] [\-U \s-1LINES\s0] \s-1FILE1 FILE2\s0
.Sp
Compare files line by line and output the differences between them.
This implementation supports unified diffs only.
.Sp
.Vb 10
\&        \-a      Treat all files as text
\&        \-b      Ignore changes in the amount of whitespace
\&        \-B      Ignore changes whose lines are all blank
\&        \-d      Try hard to find a smaller set of changes
\&        \-i      Ignore case differences
\&        \-L      Use LABEL instead of the filename in the unified header
\&        \-N      Treat absent files as empty
\&        \-q      Output only whether files differ
\&        \-r      Recurse
\&        \-S      Start with FILE when comparing directories
\&        \-T      Make tabs line up by prefixing a tab when necessary
\&        \-s      Report when two files are the same
\&        \-t      Expand tabs to spaces in output
\&        \-U      Output LINES lines of context
\&        \-w      Ignore all whitespace
.Ve
.IP "\fBdirname\fR" 4
.IX Item "dirname"
dirname \s-1FILENAME\s0
.Sp
Strip non-directory suffix from \s-1FILENAME\s0
.IP "\fBdos2unix\fR" 4
.IX Item "dos2unix"
dos2unix [\-ud] [\s-1FILE\s0]
.Sp
Convert \s-1FILE\s0 in-place from \s-1DOS\s0 to Unix format.
When no file is given, use stdin/stdout.
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP "\fBdu\fR" 4
.IX Item "du"
du [\-aHLdclsxhmk] [\s-1FILE\s0]...
.Sp
Summarize disk space used for each \s-1FILE\s0 and/or directory
.Sp
.Vb 11
\&        \-a      Show file sizes too
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-d N    Limit output to directories (and files with \-a) of depth < N
\&        \-c      Show grand total
\&        \-l      Count sizes many times if hard linked
\&        \-s      Display only a total for each argument
\&        \-x      Skip directories on different filesystems
\&        \-h      Sizes in human readable format (e.g., 1K 243M 2G)
\&        \-m      Sizes in megabytes
\&        \-k      Sizes in kilobytes (default)
.Ve
.IP "\fBecho\fR" 4
.IX Item "echo"
echo [\-neE] [\s-1ARG\s0]...
.Sp
Print the specified ARGs to stdout
.Sp
.Vb 3
\&        \-n      Suppress trailing newline
\&        \-e      Interpret backslash escapes (i.e., \et=tab)
\&        \-E      Don\*(Aqt interpret backslash escapes (default)
.Ve
.IP "\fBenv\fR" 4
.IX Item "env"
env [\-iu] [\-] [name=value]... [\s-1PROG ARGS\s0]
.Sp
Print the current environment or run \s-1PROG\s0 after setting up
the specified environment
.Sp
.Vb 2
\&        \-, \-i   Start with an empty environment
\&        \-u      Remove variable from the environment
.Ve
.IP "\fBenvdir\fR" 4
.IX Item "envdir"
envdir \s-1DIR PROG ARGS\s0
.Sp
Set various environment variables as specified by files
in the directory \s-1DIR,\s0 run \s-1PROG\s0
.IP "\fBexpand\fR" 4
.IX Item "expand"
expand [\-i] [\-t N] [\s-1FILE\s0]...
.Sp
Convert tabs to spaces, writing to stdout
.Sp
.Vb 2
\&        \-i      Don\*(Aqt convert tabs after non blanks
\&        \-t      Tabstops every N chars
.Ve
.IP "\fBexpr\fR" 4
.IX Item "expr"
expr \s-1EXPRESSION\s0
.Sp
Print the value of \s-1EXPRESSION\s0 to stdout
.Sp
\&\s-1EXPRESSION\s0 may be:
.Sp
.Vb 10
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 \- ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LENGTH Substring of STRING, POS counted from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like \*(Aqmatch\*(Aq or an
\&                                operator like \*(Aq/\*(Aq
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP "\fBfind\fR" 4
.IX Item "find"
find [\-HL] [\s-1PATH\s0]... [\s-1OPTIONS\s0] [\s-1ACTIONS\s0]
.Sp
Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: \s-1PATH\s0 is current directory, action is '\-print'
.Sp
.Vb 7
\&        \-L,\-follow      Follow symlinks
\&        \-H              ...on command line only
\&        \-xdev           Don\*(Aqt descend directories on other filesystems
\&        \-maxdepth N     Descend at most N levels. \-maxdepth 0 applies
\&                        actions to command line arguments only
\&        \-mindepth N     Don\*(Aqt act on first N levels
\&        \-depth          Act on directory *after* traversing it
.Ve
.Sp
Actions:
.Sp
.Vb 10
\&        ( ACTIONS )     Group actions for \-o / \-a
\&        ! ACT           Invert ACT\*(Aqs success/failure
\&        ACT1 [\-a] ACT2  If ACT1 fails, stop, else do ACT2
\&        ACT1 \-o ACT2    If ACT1 succeeds, stop, else do ACT2
\&                        Note: \-a has higher priority than \-o
\&        \-name PATTERN   Match file name (w/o directory name) to PATTERN
\&        \-iname PATTERN  Case insensitive \-name
\&        \-path PATTERN   Match path to PATTERN
\&        \-ipath PATTERN  Case insensitive \-path
\&        \-regex PATTERN  Match path to regex PATTERN
\&        \-type X         File type is X (one of: f,d,l,b,c,s,p)
\&        \-executable     File is executable
\&        \-perm MASK      At least one mask bit (+MASK), all bits (\-MASK),
\&                        or exactly MASK bits are set in file\*(Aqs mode
\&        \-mtime DAYS     mtime is greater than (+N), less than (\-N),
\&                        or exactly N days in the past
\&        \-mmin MINS      mtime is greater than (+N), less than (\-N),
\&                        or exactly N minutes in the past
\&        \-newer FILE     mtime is more recent than FILE\*(Aqs
\&        \-inum N         File has inode number N
\&        \-user NAME/ID   File is owned by given user
\&        \-group NAME/ID  File is owned by given group
\&        \-size N[bck]    File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
\&                        +/\-N: file size is bigger/smaller than N
\&        \-links N        Number of links is greater than (+N), less than (\-N),
\&                        or exactly N
\&        \-prune          If current file is directory, don\*(Aqt descend into it
\&If none of the following actions is specified, \-print is assumed
\&        \-print          Print file name
\&        \-print0         Print file name, NUL terminated
\&        \-exec CMD ARG ; Run CMD with all instances of {} replaced by
\&                        file name. Fails if CMD exits with nonzero
\&        \-exec CMD ARG + Run CMD with {} replaced by list of file names
\&        \-delete         Delete current file/directory. Turns on \-depth option
\&        \-quit           Exit
.Ve
.IP "\fBfold\fR" 4
.IX Item "fold"
fold [\-bs] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
Wrap input lines in each \s-1FILE\s0 (or stdin), writing to stdout
.Sp
.Vb 3
\&        \-b      Count bytes rather than columns
\&        \-s      Break at spaces
\&        \-w      Use WIDTH columns instead of 80
.Ve
.IP "\fBfree\fR" 4
.IX Item "free"
free
.Sp
Display the amount of free and used system memory
.IP "\fBfsync\fR" 4
.IX Item "fsync"
fsync [\-d] \s-1FILE...\s0
.Sp
Write all buffered blocks in FILEs to disk
.Sp
.Vb 1
\&        \-d      Avoid syncing metadata
.Ve
.IP "\fBftpd\fR" 4
.IX Item "ftpd"
ftpd [\-wvS] [\-t N] [\-T N] [\s-1DIR\s0]
.Sp
Anonymous \s-1FTP\s0 server. Client access occurs under ftpd's \s-1UID.\s0
Chroots to \s-1DIR,\s0 if this fails (run by non-root), cds to it.
Should be used as inetd service, inetd.conf line:
	21 stream tcp nowait root ftpd ftpd /files/to/serve
Can be run from tcpsvd:
.Sp
.Vb 1
\&        tcpsvd \-vE 0.0.0.0 21 ftpd /files/to/serve
\&
\&        \-w      Allow upload
\&        \-v      Log errors to stderr. \-vv: verbose log
\&        \-S      Log errors to syslog. \-SS: verbose log
\&        \-t,\-T N Idle and absolute timeout
.Ve
.IP "\fBftpget\fR" 4
.IX Item "ftpget"
ftpget [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1LOCAL_FILE\s0] \s-1REMOTE_FILE\s0
.Sp
Download a file via \s-1FTP\s0
.Sp
.Vb 5
\&        \-c      Continue previous transfer
\&        \-v      Verbose
\&        \-u USER Username
\&        \-p PASS Password
\&        \-P NUM  Port
.Ve
.IP "\fBftpput\fR" 4
.IX Item "ftpput"
ftpput [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1REMOTE_FILE\s0] \s-1LOCAL_FILE\s0
.Sp
Upload a file to a \s-1FTP\s0 server
.Sp
.Vb 4
\&        \-v      Verbose
\&        \-u USER Username
\&        \-p PASS Password
\&        \-P NUM  Port number
.Ve
.IP "\fBfuser\fR" 4
.IX Item "fuser"
fuser [\s-1OPTIONS\s0] \s-1FILE\s0 or \s-1PORT/PROTO\s0
.Sp
Find processes which use FILEs or PORTs
.Sp
.Vb 5
\&        \-m      Find processes which use same fs as FILEs
\&        \-4,\-6   Search only IPv4/IPv6 space
\&        \-s      Don\*(Aqt display PIDs
\&        \-k      Kill found processes
\&        \-SIGNAL Signal to send (default: KILL)
.Ve
.IP "\fBgetopt\fR" 4
.IX Item "getopt"
getopt [\s-1OPTIONS\s0] [\-\-] \s-1OPTSTRING PARAMS\s0
.Sp
.Vb 9
\&        \-a              Allow long options starting with single \-
\&        \-l LOPT[,...]   Long options to recognize
\&        \-n PROGNAME     The name under which errors are reported
\&        \-o OPTSTRING    Short options to recognize
\&        \-q              No error messages on unrecognized options
\&        \-Q              No normal output
\&        \-s SHELL        Set shell quoting conventions
\&        \-T              Version test (exits with 4)
\&        \-u              Don\*(Aqt quote output
.Ve
.Sp
Example:
.Sp
O=`getopt \-l bb: \*(-- ab:c:: \*(L"$@\*(R"` || exit 1
eval set \*(-- \*(L"$O\*(R"
while true; do
	case \*(L"$1\*(R" in
	\-a)	echo A; shift;;
	\-b|\-\-bb) echo \*(L"B:'$2'\*(R"; shift 2;;
	\-c)	case \*(L"$2\*(R" in
		"\*(L")	echo C; shift 2;;
		*)	echo \*(R"C:'$2'"; shift 2;;
		esac;;
	\-\-)	shift; break;;
	*)	echo Error; exit 1;;
	esac
done
.IP "\fBgrep\fR" 4
.IX Item "grep"
grep [\-HhnlLoqvsriwFE] [\-m N] [\-A/B/C N] PATTERN/\-e \s-1PATTERN..\s0./\-f \s-1FILE\s0 [\s-1FILE\s0]...
.Sp
Search for \s-1PATTERN\s0 in FILEs (or stdin)
.Sp
.Vb 10
\&        \-H      Add \*(Aqfilename:\*(Aq prefix
\&        \-h      Do not add \*(Aqfilename:\*(Aq prefix
\&        \-n      Add \*(Aqline_no:\*(Aq prefix
\&        \-l      Show only names of files that match
\&        \-L      Show only names of files that don\*(Aqt match
\&        \-c      Show only count of matching lines
\&        \-o      Show only the matching part of line
\&        \-q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        \-v      Select non\-matching lines
\&        \-s      Suppress open and read errors
\&        \-r      Recurse
\&        \-i      Ignore case
\&        \-w      Match whole words only
\&        \-x      Match whole lines only
\&        \-F      PATTERN is a literal (not regexp)
\&        \-E      PATTERN is an extended regexp
\&        \-m N    Match up to N times per file
\&        \-A N    Print N lines of trailing context
\&        \-B N    Print N lines of leading context
\&        \-C N    Same as \*(Aq\-A N \-B N\*(Aq
\&        \-e PTRN Pattern to match
\&        \-f FILE Read pattern from file
.Ve
.IP "\fBgunzip\fR" 4
.IX Item "gunzip"
gunzip [\-cfkt] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test file integrity
.Ve
.IP "\fBgzip\fR" 4
.IX Item "gzip"
gzip [\-cfkdt] [\s-1FILE\s0]...
.Sp
Compress FILEs (or stdin)
.Sp
.Vb 5
\&        \-d      Decompress
\&        \-t      Test file integrity
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
.Ve
.IP "\fBhd\fR" 4
.IX Item "hd"
hd \s-1FILE...\s0
.Sp
hd is an alias for hexdump \-C
.IP "\fBhead\fR" 4
.IX Item "head"
head [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print first 10 lines of each \s-1FILE\s0 (or stdin) to stdout.
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 5
\&        \-n N[kbm]       Print first N lines
\&        \-n \-N[kbm]      Print all except N last lines
\&        \-c [\-]N[kbm]    Print first N bytes
\&        \-q              Never print headers
\&        \-v              Always print headers
.Ve
.Sp
N may be suffixed by k (x1024), b (x512), or m (x1024^2).
.IP "\fBhexdump\fR" 4
.IX Item "hexdump"
hexdump [\-bcCdefnosvxR] [\s-1FILE\s0]...
.Sp
Display FILEs (or stdin) in a user specified format
.Sp
.Vb 12
\&        \-b              1\-byte octal display
\&        \-c              1\-byte character display
\&        \-d              2\-byte decimal display
\&        \-o              2\-byte octal display
\&        \-x              2\-byte hex display
\&        \-C              hex+ASCII 16 bytes per line
\&        \-v              Show all (no dup folding)
\&        \-e FORMAT_STR   Example: \*(Aq16/1 "%02x|""\en"\*(Aq
\&        \-f FORMAT_FILE
\&        \-n LENGTH       Show only first LENGTH bytes
\&        \-s OFFSET       Skip OFFSET bytes
\&        \-R              Reverse of \*(Aqhexdump \-Cv\*(Aq
.Ve
.IP "\fBhostname\fR" 4
.IX Item "hostname"
hostname [\s-1OPTIONS\s0] [\s-1HOSTNAME\s0 | \-F \s-1FILE\s0]
.Sp
Get or set hostname or \s-1DNS\s0 domain name
.Sp
.Vb 5
\&        \-s      Short
\&        \-i      Addresses for the hostname
\&        \-d      DNS domain name
\&        \-f      Fully qualified domain name
\&        \-F FILE Use FILE\*(Aqs content as hostname
.Ve
.IP "\fBhttpd\fR" 4
.IX Item "httpd"
httpd [\-ifv[v]] [\-c \s-1CONFFILE\s0] [\-p [\s-1IP:\s0]PORT] [\-r \s-1REALM\s0] [\-h \s-1HOME\s0]
or httpd \-d/\-e \s-1STRING\s0
.Sp
Listen for incoming \s-1HTTP\s0 requests
.Sp
.Vb 9
\&        \-i              Inetd mode
\&        \-f              Don\*(Aqt daemonize
\&        \-v[v]           Verbose
\&        \-p [IP:]PORT    Bind to IP:PORT (default *:80)
\&        \-r REALM        Authentication Realm for Basic Authentication
\&        \-h HOME         Home directory (default .)
\&        \-c FILE         Configuration file (default {/etc,HOME}/httpd.conf)
\&        \-e STRING       HTML encode STRING
\&        \-d STRING       URL decode STRING
.Ve
.IP "\fBi2ctransfer\fR" 4
.IX Item "i2ctransfer"
i2ctransfer [\-fay] I2CBUS {rLENGTH[@ADDR] | wLENGTH[@ADDR] \s-1DATA...\s0}...
.Sp
Read/write I2C data in one transfer
.Sp
.Vb 3
\&        \-f      Force access to busy addresses
\&        \-a      Force access to non\-regular addresses
\&        \-y      Disable interactive mode
.Ve
.IP "\fBid\fR" 4
.IX Item "id"
id [\s-1OPTIONS\s0] [\s-1USER\s0]
.Sp
Print information about \s-1USER\s0 or the current user
.Sp
.Vb 5
\&        \-u      User ID
\&        \-g      Group ID
\&        \-G      Supplementary group IDs
\&        \-n      Print names instead of numbers
\&        \-r      Print real ID instead of effective ID
.Ve
.IP "\fBifconfig\fR" 4
.IX Item "ifconfig"
ifconfig [\-a] interface [address]
.Sp
Configure a network interface
.Sp
.Vb 7
\&        [[\-]broadcast [ADDRESS]] [[\-]pointopoint [ADDRESS]]
\&        [netmask ADDRESS] [dstaddr ADDRESS]
\&        [hw ether ADDRESS] [metric NN] [mtu NN]
\&        [[\-]trailers] [[\-]arp] [[\-]allmulti]
\&        [multicast] [[\-]promisc] [txqueuelen NN] [[\-]dynamic]
\&        [mem_start NN] [io_addr NN] [irq NN]
\&        [up|down] ...
.Ve
.IP "\fBinotifyd\fR" 4
.IX Item "inotifyd"
inotifyd \s-1PROG\s0 FILE1[:MASK]...
.Sp
Run \s-1PROG\s0 on filesystem changes.
When a filesystem event matching \s-1MASK\s0 occurs on FILEn,
\&\s-1PROG ACTUAL_EVENTS\s0 FILEn [\s-1SUBFILE\s0] is run.
If \s-1PROG\s0 is \-, events are sent to stdout.
Events:
.Sp
.Vb 12
\&        a       File is accessed
\&        c       File is modified
\&        e       Metadata changed
\&        w       Writable file is closed
\&        0       Unwritable file is closed
\&        r       File is opened
\&        D       File is deleted
\&        M       File is moved
\&        u       Backing fs is unmounted
\&        o       Event queue overflowed
\&        x       File can\*(Aqt be watched anymore
\&If watching a directory:
\&
\&        y       Subfile is moved into dir
\&        m       Subfile is moved out of dir
\&        n       Subfile is created
\&        d       Subfile is deleted
.Ve
.Sp
inotifyd waits for \s-1PROG\s0 to exit.
When x event happens for all FILEs, inotifyd exits.
.IP "\fBinstall\fR" 4
.IX Item "install"
install [\-cdDsp] [\-o \s-1USER\s0] [\-g \s-1GRP\s0] [\-m \s-1MODE\s0] [\-t \s-1DIR\s0] [\s-1SOURCE\s0]... \s-1DEST\s0
.Sp
Copy files and set attributes
.Sp
.Vb 9
\&        \-c      Just copy (default)
\&        \-d      Create directories
\&        \-D      Create leading target directories
\&        \-s      Strip symbol table
\&        \-p      Preserve date
\&        \-o USER Set ownership
\&        \-g GRP  Set group ownership
\&        \-m MODE Set permissions
\&        \-t DIR  Install to DIR
.Ve
.IP "\fBiostat\fR" 4
.IX Item "iostat"
iostat [\-c] [\-d] [\-t] [\-z] [\-k|\-m] [ALL|BLOCKDEV...] [\s-1INTERVAL\s0 [\s-1COUNT\s0]]
.Sp
Report \s-1CPU\s0 and I/O statistics
.Sp
.Vb 6
\&        \-c      Show CPU utilization
\&        \-d      Show device utilization
\&        \-t      Print current time
\&        \-z      Omit devices with no activity
\&        \-k      Use kb/s
\&        \-m      Use Mb/s
.Ve
.IP "\fBipcalc\fR" 4
.IX Item "ipcalc"
ipcalc [\s-1OPTIONS\s0] ADDRESS[/PREFIX] [\s-1NETMASK\s0]
.Sp
Calculate and display network settings from \s-1IP\s0 address
.Sp
.Vb 6
\&        \-b      Broadcast address
\&        \-n      Network address
\&        \-m      Default netmask for IP
\&        \-p      Prefix for IP/NETMASK
\&        \-h      Resolved host name
\&        \-s      No error messages
.Ve
.IP "\fBkill\fR" 4
.IX Item "kill"
kill [\-l] [\-SIG] \s-1PID...\s0
.Sp
Send a signal (default: \s-1TERM\s0) to given PIDs
.Sp
.Vb 1
\&        \-l      List all signal names and numbers
.Ve
.IP "\fBkillall\fR" 4
.IX Item "killall"
killall [\-l] [\-q] [\-SIG] \s-1PROCESS_NAME...\s0
.Sp
Send a signal (default: \s-1TERM\s0) to given processes
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-q      Don\*(Aqt complain if no processes were killed
.Ve
.IP "\fBless\fR" 4
.IX Item "less"
less [\-EFIMmNSRh~] [\s-1FILE\s0]...
.Sp
View \s-1FILE\s0 (or stdin) one screenful at a time
.Sp
.Vb 9
\&        \-E      Quit once the end of a file is reached
\&        \-F      Quit if entire file fits on first screen
\&        \-I      Ignore case in all searches
\&        \-M,\-m   Display status line with line numbers
\&                and percentage through the file
\&        \-N      Prefix line number to each line
\&        \-S      Truncate long lines
\&        \-R      Remove color escape codes in input
\&        \-~      Suppress ~s displayed past EOF
.Ve
.IP "\fBln\fR" 4
.IX Item "ln"
ln [\s-1OPTIONS\s0] \s-1TARGET...\s0 LINK|DIR
.Sp
Create a link \s-1LINK\s0 or \s-1DIR/TARGET\s0 to the specified \s-1TARGET\s0(s)
.Sp
.Vb 7
\&        \-s      Make symlinks instead of hardlinks
\&        \-f      Remove existing destinations
\&        \-n      Don\*(Aqt dereference symlinks \- treat like normal file
\&        \-b      Make a backup of the target (if exists) before link operation
\&        \-S suf  Use suffix instead of ~ when making backup files
\&        \-T      Treat LINK as a file, not DIR
\&        \-v      Verbose
.Ve
.IP "\fBls\fR" 4
.IX Item "ls"
ls [\-1AaCxdLHRFplinskhrSXvctu] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
List directory contents
.Sp
.Vb 10
\&        \-1      One column output
\&        \-a      Include entries which start with .
\&        \-A      Like \-a, but exclude . and ..
\&        \-x      List by lines
\&        \-d      List directory entries instead of contents
\&        \-L      Follow symlinks
\&        \-H      Follow symlinks on command line
\&        \-R      Recurse
\&        \-p      Append / to dir entries
\&        \-F      Append indicator (one of */=@|) to entries
\&        \-l      Long listing format
\&        \-i      List inode numbers
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-s      List allocated blocks
\&        \-k      List permissions in octal format
\&        \-lc     List ctime
\&        \-lu     List atime
\&        \-\-full\-time     List full date and time
\&        \-h      Human readable sizes (1K 243M 2G)
\&        \-\-group\-directories\-first
\&        \-S      Sort by size
\&        \-X      Sort by extension
\&        \-v      Sort by version
\&        \-t      Sort by mtime
\&        \-tc     Sort by ctime
\&        \-tu     Sort by atime
\&        \-r      Reverse sort order
\&        \-w N    Format N columns wide
\&        \-\-color[={always,never,auto}]   Control coloring
.Ve
.IP "\fBlsattr\fR" 4
.IX Item "lsattr"
lsattr [\-Radlv] [\s-1FILE\s0]...
.Sp
List ext2 file attributes
.Sp
.Vb 5
\&        \-R      Recurse
\&        \-a      Don\*(Aqt hide entries starting with .
\&        \-d      List directory entries instead of contents
\&        \-l      List long flag names
\&        \-v      List version/generation number
.Ve
.IP "\fBlsof\fR" 4
.IX Item "lsof"
lsof
.Sp
Show all open files
.IP "\fBlzma\fR" 4
.IX Item "lzma"
lzma \-d [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE\s0 (or stdin)
.Sp
.Vb 4
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
.Ve
.IP "\fBmakemime\fR" 4
.IX Item "makemime"
makemime [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Create multipart MIME-encoded message from FILEs
.Sp
.Vb 5
\&        \-o FILE Output. Default: stdout
\&        \-a HDR  Add header(s). Examples:
\&                "From: user@host.org", "Date: \`date \-R\`"
\&        \-c CT   Content type. Default: application/octet\-stream
\&        \-C CS   Charset. Default: us\-ascii
.Ve
.Sp
Other options are silently ignored
.IP "\fBman\fR" 4
.IX Item "man"
man [\-aw] \s-1MANPAGE...\s0
.Sp
Display manual page
.Sp
.Vb 2
\&        \-a      Display all pages
\&        \-w      Show page locations
.Ve
.Sp
\&\f(CW$COLUMNS\fR overrides output width
.IP "\fBmd5sum\fR" 4
.IX Item "md5sum"
md5sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1MD5\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBmkdir\fR" 4
.IX Item "mkdir"
mkdir [\s-1OPTIONS\s0] \s-1DIRECTORY...\s0
.Sp
Create \s-1DIRECTORY\s0
.Sp
.Vb 2
\&        \-m MODE Mode
\&        \-p      No error if exists; make parent directories as needed
.Ve
.IP "\fBmkfifo\fR" 4
.IX Item "mkfifo"
mkfifo [\-m \s-1MODE\s0] \s-1NAME\s0
.Sp
Create named pipe
.Sp
.Vb 1
\&        \-m MODE Mode (default a=rw)
.Ve
.IP "\fBmknod\fR" 4
.IX Item "mknod"
mknod [\-m \s-1MODE\s0] \s-1NAME TYPE\s0 [\s-1MAJOR MINOR\s0]
.Sp
Create a special file (block, character, or pipe)
.Sp
.Vb 5
\&        \-m MODE Creation mode (default a=rw)
\&TYPE:
\&        b       Block device
\&        c or u  Character device
\&        p       Named pipe (MAJOR MINOR must be omitted)
.Ve
.IP "\fBmktemp\fR" 4
.IX Item "mktemp"
mktemp [\-dt] [\-p \s-1DIR\s0] [\s-1TEMPLATE\s0]
.Sp
Create a temporary file with name based on \s-1TEMPLATE\s0 and print its name.
\&\s-1TEMPLATE\s0 must end with \s-1XXXXXX\s0 (e.g. [/dir/]nameXXXXXX).
Without \s-1TEMPLATE,\s0 \-t tmp.XXXXXX is assumed.
.Sp
.Vb 5
\&        \-d      Make directory, not file
\&        \-q      Fail silently on errors
\&        \-t      Prepend base directory name to TEMPLATE
\&        \-p DIR  Use DIR as a base directory (implies \-t)
\&        \-u      Do not create anything; print a name
.Ve
.Sp
Base directory is: \-p \s-1DIR,\s0 else \f(CW$TMPDIR\fR, else /system/tmp
.IP "\fBmore\fR" 4
.IX Item "more"
more [\s-1FILE\s0]...
.Sp
View \s-1FILE\s0 (or stdin) one screenful at a time
.IP "\fBmpstat\fR" 4
.IX Item "mpstat"
mpstat [\-A] [\-I SUM|CPU|ALL|SCPU] [\-u] [\-P num|ALL] [\s-1INTERVAL\s0 [\s-1COUNT\s0]]
.Sp
Per-processor statistics
.Sp
.Vb 4
\&        \-A                      Same as \-I ALL \-u \-P ALL
\&        \-I SUM|CPU|ALL|SCPU     Report interrupt statistics
\&        \-P num|ALL              Processor to monitor
\&        \-u                      Report CPU utilization
.Ve
.IP "\fBmv\fR" 4
.IX Item "mv"
mv [\-fin] \s-1SOURCE DEST\s0
or: mv [\-fin] \s-1SOURCE... DIRECTORY\s0
.Sp
Rename \s-1SOURCE\s0 to \s-1DEST,\s0 or move \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0
.Sp
.Vb 3
\&        \-f      Don\*(Aqt prompt before overwriting
\&        \-i      Interactive, prompt before overwrite
\&        \-n      Don\*(Aqt overwrite an existing file
.Ve
.IP "\fBnc\fR" 4
.IX Item "nc"
nc [\-iN] [\-wN] [\-l] [\-p \s-1PORT\s0] [\-f FILE|IPADDR \s-1PORT\s0] [\-e \s-1PROG\s0]
.Sp
Open a pipe to \s-1IP:PORT\s0 or \s-1FILE\s0
.Sp
.Vb 7
\&        \-l      Listen mode, for inbound connects
\&                (use \-ll with \-e for persistent server)
\&        \-p PORT Local port
\&        \-w SEC  Connect timeout
\&        \-i SEC  Delay interval for lines sent
\&        \-f FILE Use file (ala /dev/ttyS0) instead of network
\&        \-e PROG Run PROG after connect
.Ve
.IP "\fBnetstat\fR" 4
.IX Item "netstat"
netstat [\-ral] [\-tuwx] [\-enWp]
.Sp
Display networking information
.Sp
.Vb 10
\&        \-r      Routing table
\&        \-a      All sockets
\&        \-l      Listening sockets
\&                Else: connected sockets
\&        \-t      TCP sockets
\&        \-u      UDP sockets
\&        \-w      Raw sockets
\&        \-x      Unix sockets
\&                Else: all socket types
\&        \-e      Other/more information
\&        \-n      Don\*(Aqt resolve names
\&        \-W      Wide display
\&        \-p      Show PID/program name for sockets
.Ve
.IP "\fBnice\fR" 4
.IX Item "nice"
nice [\-n \s-1ADJUST\s0] [\s-1PROG ARGS\s0]
.Sp
Change scheduling priority, run \s-1PROG\s0
.Sp
.Vb 1
\&        \-n ADJUST       Adjust priority by ADJUST
.Ve
.IP "\fBnmeter\fR" 4
.IX Item "nmeter"
nmeter [\-d \s-1MSEC\s0] \s-1FORMAT_STRING\s0
.Sp
Monitor system in real time
.Sp
.Vb 1
\& \-d MSEC        Milliseconds between updates, default:1000, none:\-1
.Ve
.Sp
Format specifiers:
.Sp
.Vb 10
\& %Nc or %[cN]   CPU. N \- bar size (default 10)
\&                (displays: S:system U:user N:niced D:iowait I:irq i:softirq)
\& %[nINTERFACE]  Network INTERFACE
\& %m             Allocated memory
\& %[mf]          Free memory
\& %[mt]          Total memory
\& %s             Allocated swap
\& %f             Number of used file descriptors
\& %Ni            Total/specific IRQ rate
\& %x             Context switch rate
\& %p             Forks
\& %[pn]          # of processes
\& %b             Block io
\& %Nt            Time (with N decimal points)
\& %r             Print <cr> instead of <lf> at EOL
.Ve
.IP "\fBnohup\fR" 4
.IX Item "nohup"
nohup \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 immune to hangups, with output to a non-tty
.IP "\fBnproc\fR" 4
.IX Item "nproc"
nproc \-\-all \-\-ignore=N
.Sp
Print number of available CPUs
.Sp
.Vb 2
\&        \-\-all           Number of installed CPUs
\&        \-\-ignore=N      Exclude N CPUs
.Ve
.IP "\fBnslookup\fR" 4
.IX Item "nslookup"
nslookup \s-1HOST\s0 [\s-1DNS_SERVER\s0]
.Sp
Query \s-1DNS\s0 about \s-1HOST\s0
.IP "\fBod\fR" 4
.IX Item "od"
od [\-aBbcDdeFfHhIiLlOovXx] [\s-1FILE\s0]
.Sp
Print \s-1FILE\s0 (or stdin) unambiguously, as octal bytes by default
.IP "\fBpatch\fR" 4
.IX Item "patch"
patch [\s-1OPTIONS\s0] [\s-1ORIGFILE\s0 [\s-1PATCHFILE\s0]]
.Sp
.Vb 6
\&        \-p N    Strip N leading components from file names
\&        \-i DIFF Read DIFF instead of stdin
\&        \-R      Reverse patch
\&        \-N      Ignore already applied patches
\&        \-E      Remove output files if they become empty
\&        \-\-dry\-run       Don\*(Aqt actually change files
.Ve
.IP "\fBpgrep\fR" 4
.IX Item "pgrep"
pgrep [\-flanovx] [\-s SID|\-P PPID|PATTERN]
.Sp
Display process(es) selected by regex \s-1PATTERN\s0
.Sp
.Vb 9
\&        \-l      Show command name too
\&        \-a      Show command line too
\&        \-f      Match against entire command line
\&        \-n      Show the newest process only
\&        \-o      Show the oldest process only
\&        \-v      Negate the match
\&        \-x      Match whole name (not substring)
\&        \-s      Match session ID (0 for current)
\&        \-P      Match parent process ID
.Ve
.IP "\fBpidof\fR" 4
.IX Item "pidof"
pidof [\s-1OPTIONS\s0] [\s-1NAME\s0]...
.Sp
List PIDs of all processes with names that match NAMEs
.Sp
.Vb 3
\&        \-s      Show only one PID
\&        \-o PID  Omit given pid
\&                Use %PPID to omit pid of pidof\*(Aqs parent
.Ve
.IP "\fBpkill\fR" 4
.IX Item "pkill"
pkill [\-l|\-SIGNAL] [\-fnovx] [\-s SID|\-P PPID|PATTERN]
.Sp
Send a signal to process(es) selected by regex \s-1PATTERN\s0
.Sp
.Vb 8
\&        \-l      List all signals
\&        \-f      Match against entire command line
\&        \-n      Signal the newest process only
\&        \-o      Signal the oldest process only
\&        \-v      Negate the match
\&        \-x      Match whole name (not substring)
\&        \-s      Match session ID (0 for current)
\&        \-P      Match parent process ID
.Ve
.IP "\fBpmap\fR" 4
.IX Item "pmap"
pmap [\-xq] \s-1PID...\s0
.Sp
Display process memory usage
.Sp
.Vb 2
\&        \-x      Show details
\&        \-q      Quiet
.Ve
.IP "\fBpopmaildir\fR" 4
.IX Item "popmaildir"
popmaildir [\s-1OPTIONS\s0] \s-1MAILDIR\s0 [\s-1CONN_HELPER ARGS\s0]
.Sp
Fetch content of remote mailbox to local maildir
.Sp
.Vb 6
\&        \-s              Skip authorization
\&        \-T              Get messages with TOP instead of RETR
\&        \-k              Keep retrieved messages on the server
\&        \-t SEC          Network timeout
\&        \-F \*(AqPROG ARGS\*(Aq  Filter program (may be repeated)
\&        \-M \*(AqPROG ARGS\*(Aq  Delivery program
.Ve
.Sp
Fetch from plain \s-1POP3\s0 server:
popmaildir \-k \s-1DIR\s0 nc pop3.server.com 110 <user_and_pass.txt
Fetch from SSLed \s-1POP3\s0 server and delete fetched emails:
popmaildir \s-1DIR\s0 \*(-- openssl s_client \-quiet \-connect pop3.server.com:995 <user_and_pass.txt
.IP "\fBprintenv\fR" 4
.IX Item "printenv"
printenv [\s-1VARIABLE\s0]...
.Sp
Print environment VARIABLEs.
If no \s-1VARIABLE\s0 specified, print all.
.IP "\fBprintf\fR" 4
.IX Item "printf"
printf \s-1FORMAT\s0 [\s-1ARG\s0]...
.Sp
Format and print \s-1ARG\s0(s) according to \s-1FORMAT\s0 (a\-la C printf)
.IP "\fBps\fR" 4
.IX Item "ps"
ps
.Sp
Show list of processes
.Sp
This version of ps accepts no options
	T	Show threads
.IP "\fBpscan\fR" 4
.IX Item "pscan"
pscan [\-cb] [\-p \s-1MIN_PORT\s0] [\-P \s-1MAX_PORT\s0] [\-t \s-1TIMEOUT\s0] [\-T \s-1MIN_RTT\s0] \s-1HOST\s0
.Sp
Scan a host, print all open ports
.Sp
.Vb 6
\&        \-c      Show closed ports too
\&        \-b      Show blocked ports too
\&        \-p      Scan from this port (default 1)
\&        \-P      Scan up to this port (default 1024)
\&        \-t      Timeout (default 5000 ms)
\&        \-T      Minimum rtt (default 5 ms, increase for congested hosts)
.Ve
.IP "\fBpstree\fR" 4
.IX Item "pstree"
pstree [\-p] [PID|USER]
.Sp
Display process tree, optionally start from \s-1USER\s0 or \s-1PID\s0
.Sp
.Vb 1
\&        \-p      Show pids
.Ve
.IP "\fBpwd\fR" 4
.IX Item "pwd"
pwd
.Sp
Print the full filename of the current working directory
.IP "\fBpwdx\fR" 4
.IX Item "pwdx"
pwdx \s-1PID...\s0
.Sp
Show current directory for PIDs
.IP "\fBreadlink\fR" 4
.IX Item "readlink"
readlink [\-fnv] \s-1FILE\s0
.Sp
Display the value of a symlink
.Sp
.Vb 3
\&        \-f      Canonicalize by following all symlinks
\&        \-n      Don\*(Aqt add newline
\&        \-v      Verbose
.Ve
.IP "\fBrealpath\fR" 4
.IX Item "realpath"
realpath \s-1FILE...\s0
.Sp
Return the absolute pathnames of given \s-1FILE\s0
.IP "\fBreformime\fR" 4
.IX Item "reformime"
reformime [\s-1OPTIONS\s0]
.Sp
Parse MIME-encoded message on stdin
.Sp
.Vb 3
\&        \-x PREFIX       Extract content of MIME sections to files
\&        \-X PROG ARGS    Filter content of MIME sections through PROG
\&                        Must be the last option
.Ve
.Sp
Other options are silently ignored
.IP "\fBrenice\fR" 4
.IX Item "renice"
renice [\-n] \s-1PRIORITY\s0 [[\-p | \-g | \-u] \s-1ID...\s0]...
.Sp
Change scheduling priority of a running process
.Sp
.Vb 5
\&        \-n      Add PRIORITY to current nice value
\&                Without \-n, nice value is set to PRIORITY
\&        \-p      Process ids (default)
\&        \-g      Process group ids
\&        \-u      Process user names
.Ve
.IP "\fBreset\fR" 4
.IX Item "reset"
reset
.Sp
Reset the screen
.IP "\fBresize\fR" 4
.IX Item "resize"
resize
.Sp
Resize the screen
.IP "\fBrev\fR" 4
.IX Item "rev"
rev [\s-1FILE\s0]...
.Sp
Reverse lines of \s-1FILE\s0
.IP "\fBrm\fR" 4
.IX Item "rm"
rm [\-irf] \s-1FILE...\s0
.Sp
Remove (unlink) FILEs
.Sp
.Vb 3
\&        \-i      Always prompt before removing
\&        \-f      Never prompt
\&        \-R,\-r   Recurse
.Ve
.IP "\fBrmdir\fR" 4
.IX Item "rmdir"
rmdir [\s-1OPTIONS\s0] \s-1DIRECTORY...\s0
.Sp
Remove \s-1DIRECTORY\s0 if it is empty
.Sp
.Vb 2
\&        \-p      Include parents
\&        \-\-ignore\-fail\-on\-non\-empty
.Ve
.IP "\fBroute\fR" 4
.IX Item "route"
route [{add|del|delete}]
.Sp
Edit kernel routing tables
.Sp
.Vb 3
\&        \-n      Don\*(Aqt resolve names
\&        \-e      Display other/more information
\&        \-A inet Select address family
.Ve
.IP "\fBrun-parts\fR" 4
.IX Item "run-parts"
run-parts [\-a \s-1ARG\s0]... [\-u \s-1UMASK\s0] \s-1DIRECTORY\s0
.Sp
Run a bunch of scripts in \s-1DIRECTORY\s0
.Sp
.Vb 2
\&        \-a ARG          Pass ARG as argument to scripts
\&        \-u UMASK        Set UMASK before running scripts
.Ve
.IP "\fBrunsv\fR" 4
.IX Item "runsv"
runsv \s-1DIR\s0
.Sp
Start and monitor a service and optionally an appendant log service
.IP "\fBrunsvdir\fR" 4
.IX Item "runsvdir"
runsvdir [\-P] [\-s \s-1SCRIPT\s0] \s-1DIR\s0
.Sp
Start a runsv process for each subdirectory. If it exits, restart it.
.Sp
.Vb 2
\&        \-P              Put each runsv in a new session
\&        \-s SCRIPT       Run SCRIPT <signo> after signal is processed
.Ve
.IP "\fBrx\fR" 4
.IX Item "rx"
rx \s-1FILE\s0
.Sp
Receive a file using the xmodem protocol
.IP "\fBscript\fR" 4
.IX Item "script"
script [\-afq] [\-t[\s-1FILE\s0]] [\-c \s-1PROG\s0] [\s-1OUTFILE\s0]
.Sp
Default \s-1OUTFILE\s0 is 'typescript'
.Sp
.Vb 4
\&        \-a      Append output
\&        \-c PROG Run PROG, not shell
\&        \-q      Quiet
\&        \-t[FILE] Send timing to stderr or FILE
.Ve
.IP "\fBscriptreplay\fR" 4
.IX Item "scriptreplay"
scriptreplay \s-1TIMINGFILE\s0 [\s-1TYPESCRIPT\s0 [\s-1DIVISOR\s0]]
.Sp
Play back typescripts, using timing information
.IP "\fBsed\fR" 4
.IX Item "sed"
sed [\-i[\s-1SFX\s0]] [\-nrE] [\-f \s-1FILE\s0]... [\-e \s-1CMD\s0]... [\s-1FILE\s0]...
or: sed [\-i[\s-1SFX\s0]] [\-nrE] \s-1CMD\s0 [\s-1FILE\s0]...
.Sp
.Vb 6
\&        \-e CMD  Add CMD to sed commands to be executed
\&        \-f FILE Add FILE contents to sed commands to be executed
\&        \-i[SFX] Edit files in\-place (otherwise sends to stdout)
\&                Optionally back files up, appending SFX
\&        \-n      Suppress automatic printing of pattern space
\&        \-r,\-E   Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP "\fBsendmail\fR" 4
.IX Item "sendmail"
sendmail [\-tv] [\-f \s-1SENDER\s0] [\-amLOGIN 4<user_pass.txt | \-auUSER \-apPASS]
		[\-w \s-1SECS\s0] [\-H '\s-1PROG ARGS\s0' | \-S \s-1HOST\s0] [\s-1RECIPIENT_EMAIL\s0]...
.Sp
Read email from stdin and send it
.Sp
Standard options:
.Sp
.Vb 5
\&        \-t              Read additional recipients from message body
\&        \-f SENDER       For use in MAIL FROM:<sender>. Can be empty string
\&                        Default: \-auUSER, or username of current UID
\&        \-o OPTIONS      Various options. \-oi implied, others are ignored
\&        \-i              \-oi synonym, implied and ignored
.Ve
.Sp
Busybox specific options:
.Sp
.Vb 12
\&        \-v              Verbose
\&        \-w SECS         Network timeout
\&        \-H \*(AqPROG ARGS\*(Aq  Run connection helper. Examples:
\&                openssl s_client \-quiet \-tls1 \-starttls smtp \-connect smtp.gmail.com:25
\&                openssl s_client \-quiet \-tls1 \-connect smtp.gmail.com:465
\&                        $SMTP_ANTISPAM_DELAY: seconds to wait after helper connect
\&        \-S HOST[:PORT]  Server (default $SMTPHOST or 127.0.0.1)
\&        \-amLOGIN        Log in using AUTH LOGIN
\&        \-amPLAIN        or AUTH PLAIN
\&                        (\-amCRAM\-MD5 not supported)
\&        \-auUSER         Username for AUTH
\&        \-apPASS         Password for AUTH
.Ve
.Sp
If no \-a options are given, authentication is not done.
If \-amLOGIN is given but no \-au/\-ap, user/password is read from fd #4.
Other options are silently ignored; \-oi is implied.
Use makemime to create emails with attachments.
.IP "\fBseq\fR" 4
.IX Item "seq"
seq [\-w] [\-s \s-1SEP\s0] [\s-1FIRST\s0 [\s-1INC\s0]] \s-1LAST\s0
.Sp
Print numbers from \s-1FIRST\s0 to \s-1LAST,\s0 in steps of \s-1INC.
FIRST, INC\s0 default to 1.
.Sp
.Vb 2
\&        \-w      Pad to last with leading zeros
\&        \-s SEP  String separator
.Ve
.IP "\fBsetsid\fR" 4
.IX Item "setsid"
setsid [\-c] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 in a new session. \s-1PROG\s0 will have no controlling terminal
and will not be affected by keyboard signals (^C etc).
.Sp
.Vb 1
\&        \-c      Set controlling terminal to stdin
.Ve
.IP "\fBsetuidgid\fR" 4
.IX Item "setuidgid"
setuidgid \s-1USER PROG ARGS\s0
.Sp
Set uid and gid to \s-1USER\s0's uid and gid, drop supplementary group ids,
run \s-1PROG\s0
.IP "\fBsha1sum\fR" 4
.IX Item "sha1sum"
sha1sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA1\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBsha256sum\fR" 4
.IX Item "sha256sum"
sha256sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA256\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBsha3sum\fR" 4
.IX Item "sha3sum"
sha3sum [\-c[sw]] [\-a \s-1BITS\s0] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA3\s0 checksums
.Sp
.Vb 4
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
\&        \-a BITS 224 (default), 256, 384, 512
.Ve
.IP "\fBsha512sum\fR" 4
.IX Item "sha512sum"
sha512sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA512\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBshuf\fR" 4
.IX Item "shuf"
shuf [\-e|\-i L\-H] [\-n \s-1NUM\s0] [\-o \s-1FILE\s0] [\-z] [FILE|ARG...]
.Sp
Randomly permute lines
.Sp
.Vb 5
\&        \-e      Treat ARGs as lines
\&        \-i L\-H  Treat numbers L\-H as lines
\&        \-n NUM  Output at most NUM lines
\&        \-o FILE Write to FILE, not standard output
\&        \-z      End lines with zero byte, not newline
.Ve
.IP "\fBsleep\fR" 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP "\fBsmemcap\fR" 4
.IX Item "smemcap"
smemcap >\s-1SMEMDATA.TAR\s0
.Sp
Collect memory usage data in /proc and write it to stdout
.IP "\fBsoftlimit\fR" 4
.IX Item "softlimit"
softlimit [\-a \s-1BYTES\s0] [\-m \s-1BYTES\s0] [\-d \s-1BYTES\s0] [\-s \s-1BYTES\s0] [\-l \s-1BYTES\s0]
	[\-f \s-1BYTES\s0] [\-c \s-1BYTES\s0] [\-r \s-1BYTES\s0] [\-o N] [\-p N] [\-t N]
	\s-1PROG ARGS\s0
.Sp
Set soft resource limits, then run \s-1PROG\s0
.Sp
.Vb 8
\&        \-a BYTES        Limit total size of all segments
\&        \-m BYTES        Same as \-d BYTES \-s BYTES \-l BYTES \-a BYTES
\&        \-d BYTES        Limit data segment
\&        \-s BYTES        Limit stack segment
\&        \-l BYTES        Limit locked memory size
\&        \-o N            Limit number of open files per process
\&        \-p N            Limit number of processes per uid
\&Options controlling file sizes:
\&
\&        \-f BYTES        Limit output file sizes
\&        \-c BYTES        Limit core file size
\&Efficiency opts:
\&
\&        \-r BYTES        Limit resident set size
\&        \-t N            Limit CPU time, process receives
\&                        a SIGXCPU after N seconds
.Ve
.IP "\fBsort\fR" 4
.IX Item "sort"
sort [\-nrugMcszbdfiokt] [\-o \s-1FILE\s0] [\-k start[.offset][opts][,end[.offset][opts]] [\-t \s-1CHAR\s0] [\s-1FILE\s0]...
.Sp
Sort lines of text
.Sp
.Vb 10
\&        \-o FILE Output to FILE
\&        \-c      Check whether input is sorted
\&        \-b      Ignore leading blanks
\&        \-f      Ignore case
\&        \-i      Ignore unprintable characters
\&        \-d      Dictionary order (blank or alphanumeric only)
\&        \-n      Sort numbers
\&        \-g      General numerical sort
\&        \-M      Sort month
\&        \-V      Sort version
\&        \-t CHAR Field separator
\&        \-k N[,M] Sort by Nth field
\&        \-r      Reverse sort order
\&        \-s      Stable (don\*(Aqt sort ties alphabetically)
\&        \-u      Suppress duplicate lines
\&        \-z      Lines are terminated by NUL, not newline
.Ve
.IP "\fBsplit\fR" 4
.IX Item "split"
split [\s-1OPTIONS\s0] [\s-1INPUT\s0 [\s-1PREFIX\s0]]
.Sp
.Vb 3
\&        \-b N[k|m]       Split by N (kilo|mega)bytes
\&        \-l N            Split by N lines
\&        \-a N            Use N letters as suffix
.Ve
.IP "\fBstart-stop-daemon\fR" 4
.IX Item "start-stop-daemon"
start-stop-daemon [\s-1OPTIONS\s0] [\-S|\-K] ... [\-\- \s-1ARGS...\s0]
.Sp
Search for matching processes, and then
\&\-K: stop all matching processes
\&\-S: start a process unless a matching process is found
.Sp
Process matching:
.Sp
.Vb 10
\&        \-u USERNAME|UID Match only this user\*(Aqs processes
\&        \-n NAME         Match processes with NAME
\&                        in comm field in /proc/PID/stat
\&        \-x EXECUTABLE   Match processes with this command
\&                        in /proc/PID/cmdline
\&        \-p FILE         Match a process with PID from FILE
\&        All specified conditions must match
\&\-S only:
\&        \-x EXECUTABLE   Program to run
\&        \-a NAME         Zeroth argument
\&        \-b              Background
\&        \-N N            Change nice level
\&        \-c USER[:[GRP]] Change user/group
\&        \-m              Write PID to pidfile specified by \-p
\&\-K only:
\&        \-s SIG          Signal to send
\&        \-t              Match only, exit with 0 if found
\&Other:
\&
\&        \-o              Exit with status 0 if nothing is done
\&        \-v              Verbose
\&        \-q              Quiet
.Ve
.IP "\fBstrings\fR" 4
.IX Item "strings"
strings [\-fo] [\-t o/d/x] [\-n \s-1LEN\s0] [\s-1FILE\s0]...
.Sp
Display printable strings in a binary file
.Sp
.Vb 4
\&        \-f              Precede strings with filenames
\&        \-o              Precede strings with octal offsets
\&        \-t o/d/x        Precede strings with offsets in base 8/10/16
\&        \-n LEN          At least LEN characters form a string (default 4)
.Ve
.IP "\fBstty\fR" 4
.IX Item "stty"
stty [\-a|g] [\-F \s-1DEVICE\s0] [\s-1SETTING\s0]...
.Sp
Without arguments, prints baud rate, line discipline,
and deviations from stty sane
.Sp
.Vb 4
\&        \-F DEVICE       Open device instead of stdin
\&        \-a              Print all current settings in human\-readable form
\&        \-g              Print in stty\-readable form
\&        [SETTING]       See manpage
.Ve
.IP "\fBsum\fR" 4
.IX Item "sum"
sum [\-rs] [\s-1FILE\s0]...
.Sp
Checksum and count the blocks in a file
.Sp
.Vb 2
\&        \-r      Use BSD sum algorithm (1K blocks)
\&        \-s      Use System V sum algorithm (512byte blocks)
.Ve
.IP "\fBsv\fR" 4
.IX Item "sv"
sv [\-v] [\-w \s-1SEC\s0] \s-1CMD SERVICE_DIR...\s0
.Sp
Control services monitored by runsv supervisor.
Commands (only first character is enough):
.Sp
status: query service status
up: if service isn't running, start it. If service stops, restart it
once: like 'up', but if service stops, don't restart it
down: send \s-1TERM\s0 and \s-1CONT\s0 signals. If ./run exits, start ./finish
	if it exists. After it stops, don't restart service
exit: send \s-1TERM\s0 and \s-1CONT\s0 signals to service and log service. If they exit,
	runsv exits too
pause, cont, hup, alarm, interrupt, quit, 1, 2, term, kill: send
\&\s-1STOP, CONT, HUP, ALRM, INT, QUIT, USR1, USR2, TERM, KILL\s0 signal to service
.IP "\fBsvlogd\fR" 4
.IX Item "svlogd"
svlogd [\-tttv] [\-r C] [\-R \s-1CHARS\s0] [\-l \s-1MATCHLEN\s0] [\-b \s-1BUFLEN\s0] \s-1DIR...\s0
.Sp
Read log data from stdin and write to rotated log files in DIRs
.Sp
\&\-r C		Replace non-printable characters with C
\&\-R \s-1CHARS\s0	Also replace \s-1CHARS\s0 with C (default _)
\&\-t		Timestamp with \f(CW@tai64n\fR
\&\-tt		Timestamp with yyyy\-mm\-dd_hh:mm:ss.sssss
\&\-ttt		Timestamp with yyyy\-mm\-ddThh:mm:ss.sssss
\&\-v		Verbose
.Sp
DIR/config file modifies behavior:
sSIZE \- when to rotate logs (default 1000000, 0 disables)
nNUM \- number of files to retain
!PROG \- process rotated log with \s-1PROG
+,\-PATTERN\s0 \- (de)select line for logging
E,ePATTERN \- (de)select line for stderr
.IP "\fBsync\fR" 4
.IX Item "sync"
sync
.Sp
Write all buffered blocks to disk
.IP "\fBsysctl\fR" 4
.IX Item "sysctl"
sysctl \-p [\-enq] [\s-1FILE...\s0] / [\-enqaw] [KEY[=VALUE]]...
.Sp
Show/set kernel parameters
.Sp
.Vb 6
\&        \-p      Set values from FILEs (default /etc/sysctl.conf)
\&        \-e      Don\*(Aqt warn about unknown keys
\&        \-n      Don\*(Aqt show key names
\&        \-q      Quiet
\&        \-a      Show all values
\&        \-w      Set values
.Ve
.IP "\fBtac\fR" 4
.IX Item "tac"
tac [\s-1FILE\s0]...
.Sp
Concatenate FILEs and print them in reverse
.IP "\fBtail\fR" 4
.IX Item "tail"
tail [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print last 10 lines of each \s-1FILE\s0 (or stdin) to stdout.
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 8
\&        \-f              Print data as file grows
\&        \-c [+]N[kbm]    Print last N bytes
\&        \-n N[kbm]       Print last N lines
\&        \-n +N[kbm]      Start on Nth line and print the rest
\&        \-q              Never print headers
\&        \-s SECONDS      Wait SECONDS between reads with \-f
\&        \-v              Always print headers
\&        \-F              Same as \-f, but keep retrying
.Ve
.Sp
N may be suffixed by k (x1024), b (x512), or m (x1024^2).
.IP "\fBtar\fR" 4
.IX Item "tar"
tar c|x|t [\-ZzJjahmvokO] [\-f \s-1TARFILE\s0] [\-C \s-1DIR\s0] [\-T \s-1FILE\s0] [\-X \s-1FILE\s0] [\-\-exclude \s-1PATTERN\s0]... [\s-1FILE\s0]...
.Sp
Create, extract, or list files from a tar file
.Sp
.Vb 10
\&        c       Create
\&        x       Extract
\&        t       List
\&        \-f FILE Name of TARFILE (\*(Aq\-\*(Aq for stdin/out)
\&        \-C DIR  Change to DIR before operation
\&        \-v      Verbose
\&        \-O      Extract to stdout
\&        \-m      Don\*(Aqt restore mtime
\&        \-o      Don\*(Aqt restore user:group
\&        \-k      Don\*(Aqt replace existing files
\&        \-Z      (De)compress using compress
\&        \-z      (De)compress using gzip
\&        \-J      (De)compress using xz
\&        \-j      (De)compress using bzip2
\&        \-a      (De)compress using lzma
\&        \-h      Follow symlinks
\&        \-T FILE File with names to include
\&        \-X FILE File with glob patterns to exclude
\&        \-\-exclude PATTERN       Glob pattern to exclude
.Ve
.IP "\fBtcpsvd\fR" 4
.IX Item "tcpsvd"
tcpsvd [\-hEv] [\-c N] [\-C N[:MSG]] [\-b N] [\-u \s-1USER\s0] [\-l \s-1NAME\s0] \s-1IP PORT PROG\s0
.Sp
Create \s-1TCP\s0 socket, bind to \s-1IP:PORT\s0 and listen for incoming connections.
Run \s-1PROG\s0 for each connection.
.Sp
.Vb 12
\&        IP PORT         IP:PORT to listen on
\&        PROG ARGS       Program to run
\&        \-u USER[:GRP]   Change to user/group after bind
\&        \-c N            Up to N connections simultaneously (default 30)
\&        \-b N            Allow backlog of approximately N TCP SYNs (default 20)
\&        \-C N[:MSG]      Allow only up to N connections from the same IP:
\&                        new connections from this IP address are closed
\&                        immediately, MSG is written to the peer before close
\&        \-E              Don\*(Aqt set up environment
\&        \-h              Look up peer\*(Aqs hostname
\&        \-l NAME         Local hostname (else look up local hostname in DNS)
\&        \-v              Verbose
.Ve
.Sp
Environment if no \-E:
PROTO='\s-1TCP\s0'
TCPREMOTEADDR='ip:port'
TCPLOCALADDR='ip:port'
TCPORIGDSTADDR='ip:port' of destination before firewall
	Useful for REDIRECTed-to-local connections:
	iptables \-t nat \-A \s-1PREROUTING\s0 \-p tcp \-\-dport 80 \-j \s-1REDIRECT\s0 \-\-to 8080
TCPCONCURRENCY=num_of_connects_from_this_ip
If \-h:
TCPLOCALHOST='hostname' (\-l \s-1NAME\s0 is used if specified)
TCPREMOTEHOST='hostname'
.IP "\fBtee\fR" 4
.IX Item "tee"
tee [\-ai] [\s-1FILE\s0]...
.Sp
Copy stdin to each \s-1FILE,\s0 and also to stdout
.Sp
.Vb 2
\&        \-a      Append to the given FILEs, don\*(Aqt overwrite
\&        \-i      Ignore interrupt signals (SIGINT)
.Ve
.IP "\fBtelnet\fR" 4
.IX Item "telnet"
telnet [\-a] [\-l \s-1USER\s0] \s-1HOST\s0 [\s-1PORT\s0]
.Sp
Connect to telnet server
.Sp
.Vb 2
\&        \-a      Automatic login with $USER variable
\&        \-l USER Automatic login as USER
.Ve
.IP "\fBtelnetd\fR" 4
.IX Item "telnetd"
telnetd [\s-1OPTIONS\s0]
.Sp
Handle incoming telnet connections
.Sp
.Vb 8
\&        \-l LOGIN        Exec LOGIN on connect
\&        \-f ISSUE_FILE   Display ISSUE_FILE instead of /etc/issue
\&        \-K              Close connection as soon as login exits
\&                        (normally wait until all programs close slave pty)
\&        \-p PORT         Port to listen on
\&        \-b ADDR[:PORT]  Address to bind to
\&        \-F              Run in foreground
\&        \-i              Inetd mode
.Ve
.IP "\fBtftp\fR" 4
.IX Item "tftp"
tftp [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1PORT\s0]
.Sp
Transfer a file from/to tftp server
.Sp
.Vb 5
\&        \-l FILE Local FILE
\&        \-r FILE Remote FILE
\&        \-g      Get file
\&        \-p      Put file
\&        \-b SIZE Transfer blocks of SIZE octets
.Ve
.IP "\fBtftpd\fR" 4
.IX Item "tftpd"
tftpd [\-crl] [\-u \s-1USER\s0] [\s-1DIR\s0]
.Sp
Transfer a file on tftp client's request
.Sp
tftpd should be used as an inetd service.
tftpd's line for inetd.conf:
	69 dgram udp nowait root tftpd tftpd \-l /files/to/serve
It also can be ran from udpsvd:
.Sp
.Vb 1
\&        udpsvd \-vE 0.0.0.0 69 tftpd /files/to/serve
\&
\&        \-r      Prohibit upload
\&        \-c      Allow file creation via upload
\&        \-u      Access files as USER
\&        \-l      Log to syslog (inetd mode requires this)
.Ve
.IP "\fBtime\fR" 4
.IX Item "time"
time [\-vpa] [\-o \s-1FILE\s0] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG,\s0 display resource usage when it exits
.Sp
.Vb 5
\&        \-v      Verbose
\&        \-p      POSIX output format
\&        \-f FMT  Custom format
\&        \-o FILE Write result to FILE
\&        \-a      Append (else overwrite)
.Ve
.IP "\fBtimeout\fR" 4
.IX Item "timeout"
timeout [\-s \s-1SIG\s0] \s-1SECS PROG ARGS\s0
.Sp
Runs \s-1PROG.\s0 Sends \s-1SIG\s0 to it if it is not gone in \s-1SECS\s0 seconds.
Default \s-1SIG: TERM.\s0
.IP "\fBtouch\fR" 4
.IX Item "touch"
touch [\-c] [\-d \s-1DATE\s0] [\-t \s-1DATE\s0] [\-r \s-1FILE\s0] \s-1FILE...\s0
.Sp
Update the last-modified date on the given FILE[s]
.Sp
.Vb 4
\&        \-c      Don\*(Aqt create files
\&        \-d DT   Date/time to use
\&        \-t DT   Date/time to use
\&        \-r FILE Use FILE\*(Aqs date/time
.Ve
.IP "\fBtr\fR" 4
.IX Item "tr"
tr [\-cds] \s-1STRING1\s0 [\s-1STRING2\s0]
.Sp
Translate, squeeze, or delete characters from stdin, writing to stdout
.Sp
.Vb 3
\&        \-c      Take complement of STRING1
\&        \-d      Delete input characters coded STRING1
\&        \-s      Squeeze multiple output characters of STRING2 into one character
.Ve
.IP "\fBtraceroute\fR" 4
.IX Item "traceroute"
traceroute [\-FIlnrv] [\-f 1ST_TTL] [\-m \s-1MAXTTL\s0] [\-q \s-1PROBES\s0] [\-p \s-1PORT\s0]
	[\-t \s-1TOS\s0] [\-w \s-1WAIT_SEC\s0] [\-s \s-1SRC_IP\s0] [\-i \s-1IFACE\s0]
	[\-z \s-1PAUSE_MSEC\s0] \s-1HOST\s0 [\s-1BYTES\s0]
.Sp
Trace the route to \s-1HOST\s0
.Sp
.Vb 10
\&        \-F      Set don\*(Aqt fragment bit
\&        \-I      Use ICMP ECHO instead of UDP datagrams
\&        \-l      Display TTL value of the returned packet
\&        \-n      Print numeric addresses
\&        \-r      Bypass routing tables, send directly to HOST
\&        \-v      Verbose
\&        \-f N    First number of hops (default 1)
\&        \-m N    Max number of hops
\&        \-q N    Number of probes per hop (default 3)
\&        \-p N    Base UDP port number used in probes
\&                (default 33434)
\&        \-s IP   Source address
\&        \-i IFACE Source interface
\&        \-t N    Type\-of\-service in probe packets (default 0)
\&        \-w SEC  Time to wait for a response (default 3)
\&        \-g IP   Loose source route gateway (8 max)
.Ve
.IP "\fBts\fR" 4
.IX Item "ts"
ts [\-is] [\s-1STRFTIME\s0]
.IP "\fBtty\fR" 4
.IX Item "tty"
tty
.Sp
Print file name of stdin's terminal
.IP "\fBttysize\fR" 4
.IX Item "ttysize"
ttysize [w] [h]
.Sp
Print dimensions of stdin tty, or 80x24
.IP "\fBudpsvd\fR" 4
.IX Item "udpsvd"
udpsvd [\-hEv] [\-c N] [\-u \s-1USER\s0] [\-l \s-1NAME\s0] \s-1IP PORT PROG\s0
.Sp
Create \s-1UDP\s0 socket, bind to \s-1IP:PORT\s0 and wait for incoming packets.
Run \s-1PROG\s0 for each packet, redirecting all further packets with same
peer ip:port to it.
.Sp
.Vb 8
\&        IP PORT         IP:PORT to listen on
\&        PROG ARGS       Program to run
\&        \-u USER[:GRP]   Change to user/group after bind
\&        \-c N            Up to N connections simultaneously (default 30)
\&        \-E              Don\*(Aqt set up environment
\&        \-h              Look up peer\*(Aqs hostname
\&        \-l NAME         Local hostname (else look up local hostname in DNS)
\&        \-v              Verbose
.Ve
.Sp
Environment if no \-E:
PROTO='\s-1UDP\s0'
UDPREMOTEADDR='ip:port'
UDPLOCALADDR='ip:port'
If \-h:
UDPLOCALHOST='hostname' (\-l \s-1NAME\s0 is used if specified)
UDPREMOTEHOST='hostname'
.IP "\fBuname\fR" 4
.IX Item "uname"
uname [\-amnrspvio]
.Sp
Print system information
.Sp
.Vb 9
\&        \-a      Print all
\&        \-m      The machine (hardware) type
\&        \-n      Hostname
\&        \-r      Kernel release
\&        \-s      Kernel name (default)
\&        \-p      Processor type
\&        \-v      Kernel version
\&        \-i      The hardware platform
\&        \-o      OS name
.Ve
.IP "\fBuncompress\fR" 4
.IX Item "uncompress"
uncompress [\-cf] [\s-1FILE\s0]...
.Sp
Decompress .Z file[s]
.Sp
.Vb 2
\&        \-c      Write to stdout
\&        \-f      Overwrite
.Ve
.IP "\fBunexpand\fR" 4
.IX Item "unexpand"
unexpand [\-fa][\-t N] [\s-1FILE\s0]...
.Sp
Convert spaces to tabs, writing to stdout
.Sp
.Vb 3
\&        \-a      Convert all blanks
\&        \-f      Convert only leading blanks
\&        \-t N    Tabstops every N chars
.Ve
.IP "\fBuniq\fR" 4
.IX Item "uniq"
uniq [\-cdu][\-f,s,w N] [\s-1INPUT\s0 [\s-1OUTPUT\s0]]
.Sp
Discard duplicate lines
.Sp
.Vb 7
\&        \-c      Prefix lines by the number of occurrences
\&        \-d      Only print duplicate lines
\&        \-u      Only print unique lines
\&        \-i      Ignore case
\&        \-f N    Skip first N fields
\&        \-s N    Skip first N chars (after any skipped fields)
\&        \-w N    Compare N characters in line
.Ve
.IP "\fBunix2dos\fR" 4
.IX Item "unix2dos"
unix2dos [\-ud] [\s-1FILE\s0]
.Sp
Convert \s-1FILE\s0 in-place from Unix to \s-1DOS\s0 format.
When no file is given, use stdin/stdout.
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP "\fBunlink\fR" 4
.IX Item "unlink"
unlink \s-1FILE\s0
.Sp
Delete \s-1FILE\s0 by calling \fBunlink()\fR
.IP "\fBunlzma\fR" 4
.IX Item "unlzma"
unlzma [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE\s0 (or stdin)
.Sp
.Vb 3
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
.Ve
.IP "\fBunxz\fR" 4
.IX Item "unxz"
unxz [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE\s0 (or stdin)
.Sp
.Vb 3
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
.Ve
.IP "\fBunzip\fR" 4
.IX Item "unzip"
unzip [\-lnojpq] FILE[.zip] [\s-1FILE\s0]... [\-x \s-1FILE...\s0] [\-d \s-1DIR\s0]
.Sp
Extract FILEs from \s-1ZIP\s0 archive
.Sp
.Vb 8
\&        \-l      List contents (with \-q for short form)
\&        \-n      Never overwrite files (default: ask)
\&        \-o      Overwrite
\&        \-j      Do not restore paths
\&        \-p      Print to stdout
\&        \-q      Quiet
\&        \-x FILE Exclude FILEs
\&        \-d DIR  Extract into DIR
.Ve
.IP "\fBuptime\fR" 4
.IX Item "uptime"
uptime
.Sp
Display the time since the last boot
.IP "\fBusleep\fR" 4
.IX Item "usleep"
usleep N
.Sp
Pause for N microseconds
.IP "\fBuudecode\fR" 4
.IX Item "uudecode"
uudecode [\-o \s-1OUTFILE\s0] [\s-1INFILE\s0]
.Sp
Uudecode a file
Finds \s-1OUTFILE\s0 in uuencoded source unless \-o is given
.IP "\fBuuencode\fR" 4
.IX Item "uuencode"
uuencode [\-m] [\s-1FILE\s0] \s-1STORED_FILENAME\s0
.Sp
Uuencode \s-1FILE\s0 (or stdin) to stdout
.Sp
.Vb 1
\&        \-m      Use base64 encoding per RFC1521
.Ve
.IP "\fBvi\fR" 4
.IX Item "vi"
vi [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Edit \s-1FILE\s0
.Sp
.Vb 3
\&        \-c CMD  Initial command to run ($EXINIT also available)
\&        \-R      Read\-only
\&        \-H      List available features
.Ve
.IP "\fBwatch\fR" 4
.IX Item "watch"
watch [\-n \s-1SEC\s0] [\-t] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 periodically
.Sp
.Vb 2
\&        \-n SEC  Loop period (default 2)
\&        \-t      Don\*(Aqt print header
.Ve
.IP "\fBwc\fR" 4
.IX Item "wc"
wc [\-cmlwL] [\s-1FILE\s0]...
.Sp
Count lines, words, and bytes for each \s-1FILE\s0 (or stdin)
.Sp
.Vb 5
\&        \-c      Count bytes
\&        \-m      Count characters
\&        \-l      Count newlines
\&        \-w      Count words
\&        \-L      Print longest line length
.Ve
.IP "\fBwget\fR" 4
.IX Item "wget"
wget [\-cq] [\-O \s-1FILE\s0] [\-o \s-1FILE\s0] [\-Y on/off] [\-P \s-1DIR\s0] [\-S] [\-U \s-1AGENT\s0] [\-T \s-1SEC\s0] \s-1URL...\s0
.Sp
Retrieve files via \s-1HTTP\s0 or \s-1FTP\s0
.Sp
.Vb 9
\&        \-c              Continue retrieval of aborted transfer
\&        \-q              Quiet
\&        \-P DIR          Save to DIR (default .)
\&        \-S              Show server response
\&        \-T SEC          Network read timeout is SEC seconds
\&        \-O FILE         Save to FILE (\*(Aq\-\*(Aq for stdout)
\&        \-o FILE         Log messages to FILE
\&        \-U STR          Use STR for User\-Agent header
\&        \-Y on/off       Use proxy
.Ve
.IP "\fBwhich\fR" 4
.IX Item "which"
which [\s-1COMMAND\s0]...
.Sp
Locate a \s-1COMMAND\s0
.IP "\fBwhoami\fR" 4
.IX Item "whoami"
whoami
.Sp
Print the user name associated with the current effective user id
.IP "\fBwhois\fR" 4
.IX Item "whois"
whois [\-i] [\-h \s-1SERVER\s0] [\-p \s-1PORT\s0] \s-1NAME...\s0
.Sp
Query \s-1WHOIS\s0 info about \s-1NAME\s0
.Sp
.Vb 2
\&        \-i      Show redirect results too
\&        \-h,\-p   Server to query
.Ve
.IP "\fBxargs\fR" 4
.IX Item "xargs"
xargs [\s-1OPTIONS\s0] [\s-1PROG ARGS\s0]
.Sp
Run \s-1PROG\s0 on every item given by stdin
.Sp
.Vb 11
\&        \-0      Input is separated by NULs
\&        \-a FILE Read from FILE instead of stdin
\&        \-r      Don\*(Aqt run command if input is empty
\&        \-t      Print the command on stderr before execution
\&        \-p      Ask user whether to run each command
\&        \-E STR,\-e[STR]  STR stops input processing
\&        \-I STR  Replace STR within PROG ARGS with input line
\&        \-n N    Pass no more than N args to PROG
\&        \-s N    Pass command line of no more than N bytes
\&        \-P N    Run up to N PROGs in parallel
\&        \-x      Exit if size is exceeded
.Ve
.IP "\fBxz\fR" 4
.IX Item "xz"
xz \-d [\-cfk] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE\s0 (or stdin)
.Sp
.Vb 4
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
.Ve
.IP "\fByes\fR" 4
.IX Item "yes"
yes [\s-1STRING\s0]
.Sp
Repeatedly output a line with \s-1STRING,\s0 or 'y'
.SH "LIBC NSS"
.IX Header "LIBC NSS"
\&\s-1GNU\s0 Libc (glibc) uses the Name Service Switch (\s-1NSS\s0) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of \s-1NSS.\s0  Some applets however, such as login and su, will use libc functions
that require \s-1NSS.\s0
.PP
If you enable \s-1CONFIG_USE_BB_PWD_GRP,\s0 BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using \s-1NSS.\s0  This may allow you to run your system without the need for
installing any of the \s-1NSS\s0 configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc \s-1NSS\s0 stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any \s-1NSS\s0 support files or libraries.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH "AUTHORS"
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa \s-1III\s0 <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
.PP
Paul Fox <pgf@foxharp.boston.ma.us>
.PP
.Vb 1
\&    vi editing mode for ash, various other patches/fixes
.Ve
.PP
Roberto A. Foglietta <me@roberto.foglietta.name>
.PP
.Vb 1
\&    port: dnsd
.Ve
.PP
Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
.PP
.Vb 1
\&    misc
.Ve
.PP
Mike Frysinger <vapier@gentoo.org>
.PP
.Vb 1
\&    initial e2fsprogs, printenv, setarch, sum, misc
.Ve
.PP
Jie Zhang <jie.zhang@analog.com>
.PP
.Vb 1
\&    fixed two bugs in msh and hush (exitcode of killed processes)
.Ve
